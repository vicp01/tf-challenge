module.bastion.data.aws_iam_policy.AmazonSSMManagedInstanceCore: Reading...
module.asg.data.aws_partition.current: Reading...
data.aws_elb_service_account.this: Reading...
data.aws_caller_identity.current: Reading...
module.asg.data.aws_partition.current: Read complete after 0s [id=aws]
module.bastion.data.aws_ec2_instance_type.this: Reading...
module.vpc.data.aws_iam_policy_document.flow_log_cloudwatch_assume_role[0]: Reading...
data.aws_elb_service_account.this: Read complete after 0s [id=797873946194]
data.aws_region.current: Reading...
module.vpc.data.aws_iam_policy_document.vpc_flow_log_cloudwatch[0]: Reading...
data.aws_region.current: Read complete after 0s [id=us-west-2]
module.vpc.data.aws_region.current: Reading...
module.vpc.module.vpc_endpoints.data.aws_region.current: Reading...
module.vpc.data.aws_iam_policy_document.flow_log_cloudwatch_assume_role[0]: Read complete after 0s [id=1021377347]
data.aws_availability_zones.available: Reading...
module.vpc.data.aws_region.current: Read complete after 0s [id=us-west-2]
module.vpc.data.aws_iam_policy_document.vpc_flow_log_cloudwatch[0]: Read complete after 0s [id=2053943846]
module.vpc.module.vpc_endpoints.data.aws_region.current: Read complete after 0s [id=us-west-2]
data.aws_ami.al2023: Reading...
data.aws_caller_identity.current: Read complete after 0s [id=941377146656]
data.aws_availability_zones.available: Read complete after 0s [id=us-west-2]
module.bastion.data.aws_ec2_instance_type.this: Read complete after 0s [id=t2.micro]
data.aws_ami.al2023: Read complete after 1s [id=ami-036428f37186903ce]
module.bastion.data.aws_iam_policy.AmazonSSMManagedInstanceCore: Read complete after 3s [id=arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore]

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create
 <= read (data resources)

Terraform will perform the following actions:

  # data.aws_iam_policy_document.alb_logs[0] will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "alb_logs" {
      + id            = (known after apply)
      + json          = (known after apply)
      + minified_json = (known after apply)

      + statement {
          + actions   = [
              + "s3:PutObject",
            ]
          + effect    = "Allow"
          + resources = [
              + (known after apply),
            ]
          + sid       = "AllowELBLogDelivery"

          + condition {
              + test     = "StringEquals"
              + values   = [
                  + "bucket-owner-full-control",
                ]
              + variable = "s3:x-amz-acl"
            }

          + principals {
              + identifiers = [
                  + "arn:aws:iam::797873946194:root",
                ]
              + type        = "AWS"
            }
        }
    }

  # data.aws_instance.bastion will be read during apply
  # (config refers to values not yet known)
 <= data "aws_instance" "bastion" {
      + ami                         = (known after apply)
      + arn                         = (known after apply)
      + associate_public_ip_address = (known after apply)
      + availability_zone           = (known after apply)
      + credit_specification        = (known after apply)
      + disable_api_stop            = (known after apply)
      + disable_api_termination     = (known after apply)
      + ebs_block_device            = (known after apply)
      + ebs_optimized               = (known after apply)
      + enclave_options             = (known after apply)
      + ephemeral_block_device      = (known after apply)
      + host_id                     = (known after apply)
      + host_resource_group_arn     = (known after apply)
      + iam_instance_profile        = (known after apply)
      + id                          = (known after apply)
      + instance_id                 = (known after apply)
      + instance_state              = (known after apply)
      + instance_tags               = (known after apply)
      + instance_type               = (known after apply)
      + ipv6_addresses              = (known after apply)
      + key_name                    = (known after apply)
      + launch_time                 = (known after apply)
      + maintenance_options         = (known after apply)
      + metadata_options            = (known after apply)
      + monitoring                  = (known after apply)
      + network_interface_id        = (known after apply)
      + outpost_arn                 = (known after apply)
      + password_data               = (known after apply)
      + placement_group             = (known after apply)
      + placement_partition_number  = (known after apply)
      + private_dns                 = (known after apply)
      + private_dns_name_options    = (known after apply)
      + private_ip                  = (known after apply)
      + public_dns                  = (known after apply)
      + public_ip                   = (known after apply)
      + root_block_device           = (known after apply)
      + secondary_private_ips       = (known after apply)
      + security_groups             = (known after apply)
      + source_dest_check           = (known after apply)
      + subnet_id                   = (known after apply)
      + tags                        = (known after apply)
      + tenancy                     = (known after apply)
      + user_data                   = (known after apply)
      + user_data_base64            = (known after apply)
      + vpc_security_group_ids      = (known after apply)
    }

  # aws_cloudwatch_metric_alarm.alb_5xx[0] will be created
  + resource "aws_cloudwatch_metric_alarm" "alb_5xx" {
      + actions_enabled                       = true
      + alarm_actions                         = (known after apply)
      + alarm_description                     = "ALB is generating 5xx responses"
      + alarm_name                            = "sre-alb-HTTPCode_ELB_5XX_Count>0"
      + arn                                   = (known after apply)
      + comparison_operator                   = "GreaterThanThreshold"
      + dimensions                            = (known after apply)
      + evaluate_low_sample_count_percentiles = (known after apply)
      + evaluation_periods                    = 5
      + id                                    = (known after apply)
      + metric_name                           = "HTTPCode_ELB_5XX_Count"
      + namespace                             = "AWS/ApplicationELB"
      + ok_actions                            = (known after apply)
      + period                                = 60
      + statistic                             = "Sum"
      + tags_all                              = (known after apply)
      + threshold                             = 0
      + treat_missing_data                    = "notBreaching"
    }

  # aws_cloudwatch_metric_alarm.tg_unhealthy[0] will be created
  + resource "aws_cloudwatch_metric_alarm" "tg_unhealthy" {
      + actions_enabled                       = true
      + alarm_actions                         = (known after apply)
      + alarm_description                     = "One or more targets are unhealthy"
      + alarm_name                            = "sre-tg-UnHealthyHostCount>0"
      + arn                                   = (known after apply)
      + comparison_operator                   = "GreaterThanThreshold"
      + dimensions                            = (known after apply)
      + evaluate_low_sample_count_percentiles = (known after apply)
      + evaluation_periods                    = 2
      + id                                    = (known after apply)
      + metric_name                           = "UnHealthyHostCount"
      + namespace                             = "AWS/ApplicationELB"
      + ok_actions                            = (known after apply)
      + period                                = 60
      + statistic                             = "Average"
      + tags_all                              = (known after apply)
      + threshold                             = 0
      + treat_missing_data                    = "notBreaching"
    }

  # aws_lb.alb will be created
  + resource "aws_lb" "alb" {
      + arn                                                          = (known after apply)
      + arn_suffix                                                   = (known after apply)
      + client_keep_alive                                            = 3600
      + desync_mitigation_mode                                       = "defensive"
      + dns_name                                                     = (known after apply)
      + drop_invalid_header_fields                                   = false
      + enable_deletion_protection                                   = false
      + enable_http2                                                 = true
      + enable_tls_version_and_cipher_suite_headers                  = false
      + enable_waf_fail_open                                         = false
      + enable_xff_client_port                                       = false
      + enable_zonal_shift                                           = false
      + enforce_security_group_inbound_rules_on_private_link_traffic = (known after apply)
      + id                                                           = (known after apply)
      + idle_timeout                                                 = 60
      + internal                                                     = false
      + ip_address_type                                              = (known after apply)
      + load_balancer_type                                           = "application"
      + name                                                         = "sre-alb"
      + name_prefix                                                  = (known after apply)
      + preserve_host_header                                         = false
      + security_groups                                              = (known after apply)
      + subnets                                                      = (known after apply)
      + tags_all                                                     = (known after apply)
      + vpc_id                                                       = (known after apply)
      + xff_header_processing_mode                                   = "append"
      + zone_id                                                      = (known after apply)

      + access_logs {
          + bucket  = (known after apply)
          + enabled = true
          + prefix  = "alb"
        }
    }

  # aws_lb_listener.http will be created
  + resource "aws_lb_listener" "http" {
      + arn                                                                   = (known after apply)
      + id                                                                    = (known after apply)
      + load_balancer_arn                                                     = (known after apply)
      + port                                                                  = 80
      + protocol                                                              = "HTTP"
      + routing_http_request_x_amzn_mtls_clientcert_header_name               = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_issuer_header_name        = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_leaf_header_name          = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_serial_number_header_name = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_subject_header_name       = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_validity_header_name      = (known after apply)
      + routing_http_request_x_amzn_tls_cipher_suite_header_name              = (known after apply)
      + routing_http_request_x_amzn_tls_version_header_name                   = (known after apply)
      + routing_http_response_access_control_allow_credentials_header_value   = (known after apply)
      + routing_http_response_access_control_allow_headers_header_value       = (known after apply)
      + routing_http_response_access_control_allow_methods_header_value       = (known after apply)
      + routing_http_response_access_control_allow_origin_header_value        = (known after apply)
      + routing_http_response_access_control_expose_headers_header_value      = (known after apply)
      + routing_http_response_access_control_max_age_header_value             = (known after apply)
      + routing_http_response_content_security_policy_header_value            = (known after apply)
      + routing_http_response_server_enabled                                  = (known after apply)
      + routing_http_response_strict_transport_security_header_value          = (known after apply)
      + routing_http_response_x_content_type_options_header_value             = (known after apply)
      + routing_http_response_x_frame_options_header_value                    = (known after apply)
      + ssl_policy                                                            = (known after apply)
      + tags_all                                                              = (known after apply)
      + tcp_idle_timeout_seconds                                              = (known after apply)

      + default_action {
          + order            = (known after apply)
          + target_group_arn = (known after apply)
          + type             = "forward"
        }
    }

  # aws_lb_target_group.app will be created
  + resource "aws_lb_target_group" "app" {
      + arn                                = (known after apply)
      + arn_suffix                         = (known after apply)
      + connection_termination             = (known after apply)
      + deregistration_delay               = "300"
      + id                                 = (known after apply)
      + ip_address_type                    = (known after apply)
      + lambda_multi_value_headers_enabled = false
      + load_balancer_arns                 = (known after apply)
      + load_balancing_algorithm_type      = (known after apply)
      + load_balancing_anomaly_mitigation  = (known after apply)
      + load_balancing_cross_zone_enabled  = (known after apply)
      + name                               = "sre-app-tg"
      + name_prefix                        = (known after apply)
      + port                               = 80
      + preserve_client_ip                 = (known after apply)
      + protocol                           = "HTTP"
      + protocol_version                   = (known after apply)
      + proxy_protocol_v2                  = false
      + slow_start                         = 0
      + tags_all                           = (known after apply)
      + target_type                        = "instance"
      + vpc_id                             = (known after apply)

      + health_check {
          + enabled             = true
          + healthy_threshold   = 2
          + interval            = 15
          + matcher             = "200-399"
          + path                = "/"
          + port                = "traffic-port"
          + protocol            = "HTTP"
          + timeout             = (known after apply)
          + unhealthy_threshold = 3
        }
    }

  # aws_s3_bucket.alb_logs[0] will be created
  + resource "aws_s3_bucket" "alb_logs" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      + arn                         = (known after apply)
      + bucket                      = (known after apply)
      + bucket_domain_name          = (known after apply)
      + bucket_prefix               = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + object_lock_enabled         = (known after apply)
      + policy                      = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags_all                    = (known after apply)
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)
    }

  # aws_s3_bucket_policy.alb_logs[0] will be created
  + resource "aws_s3_bucket_policy" "alb_logs" {
      + bucket = (known after apply)
      + id     = (known after apply)
      + policy = (known after apply)
    }

  # aws_s3_bucket_public_access_block.alb_logs[0] will be created
  + resource "aws_s3_bucket_public_access_block" "alb_logs" {
      + block_public_acls       = true
      + block_public_policy     = true
      + bucket                  = (known after apply)
      + id                      = (known after apply)
      + ignore_public_acls      = true
      + restrict_public_buckets = true
    }

  # aws_s3_bucket_server_side_encryption_configuration.alb_logs[0] will be created
  + resource "aws_s3_bucket_server_side_encryption_configuration" "alb_logs" {
      + bucket = (known after apply)
      + id     = (known after apply)

      + rule {
          + apply_server_side_encryption_by_default {
              + sse_algorithm = "AES256"
            }
        }
    }

  # aws_s3_bucket_versioning.alb_logs[0] will be created
  + resource "aws_s3_bucket_versioning" "alb_logs" {
      + bucket = (known after apply)
      + id     = (known after apply)

      + versioning_configuration {
          + mfa_delete = (known after apply)
          + status     = "Enabled"
        }
    }

  # aws_security_group.alb will be created
  + resource "aws_security_group" "alb" {
      + arn                    = (known after apply)
      + description            = "ALB security group"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "HTTP from anywhere"
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
            },
        ]
      + name                   = "alb-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags_all               = (known after apply)
      + vpc_id                 = (known after apply)
    }

  # aws_security_group.app will be created
  + resource "aws_security_group" "app" {
      + arn                    = (known after apply)
      + description            = "App instances"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = []
              + description      = "HTTP from ALB"
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = (known after apply)
              + self             = false
              + to_port          = 80
            },
        ]
      + name                   = "app-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags_all               = (known after apply)
      + vpc_id                 = (known after apply)
    }

  # aws_security_group.bastion will be created
  + resource "aws_security_group" "bastion" {
      + arn                    = (known after apply)
      + description            = "Bastion"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "24.16.3.19/32",
                ]
              + description      = "SSH from single CIDR"
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
        ]
      + name                   = "bastion-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags_all               = (known after apply)
      + vpc_id                 = (known after apply)
    }

  # aws_security_group_rule.bastion_to_app_ssh will be created
  + resource "aws_security_group_rule" "bastion_to_app_ssh" {
      + description              = "SSH from bastion"
      + from_port                = 22
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 22
      + type                     = "ingress"
    }

  # aws_sns_topic.alerts[0] will be created
  + resource "aws_sns_topic" "alerts" {
      + arn                         = (known after apply)
      + beginning_archive_time      = (known after apply)
      + content_based_deduplication = false
      + fifo_throughput_scope       = (known after apply)
      + fifo_topic                  = false
      + id                          = (known after apply)
      + name                        = "sre-alb-alerts"
      + name_prefix                 = (known after apply)
      + owner                       = (known after apply)
      + policy                      = (known after apply)
      + signature_version           = (known after apply)
      + tags_all                    = (known after apply)
      + tracing_config              = (known after apply)
    }

  # random_id.alb_logs_suffix[0] will be created
  + resource "random_id" "alb_logs_suffix" {
      + b64_std     = (known after apply)
      + b64_url     = (known after apply)
      + byte_length = 3
      + dec         = (known after apply)
      + hex         = (known after apply)
      + id          = (known after apply)
    }

  # module.asg.aws_autoscaling_group.this[0] will be created
  + resource "aws_autoscaling_group" "this" {
      + arn                              = (known after apply)
      + availability_zones               = (known after apply)
      + default_cooldown                 = (known after apply)
      + desired_capacity                 = 2
      + force_delete                     = false
      + force_delete_warm_pool           = false
      + health_check_grace_period        = 300
      + health_check_type                = "EC2"
      + id                               = (known after apply)
      + ignore_failed_scaling_activities = false
      + load_balancers                   = (known after apply)
      + max_size                         = 6
      + metrics_granularity              = "1Minute"
      + min_size                         = 2
      + name                             = (known after apply)
      + name_prefix                      = "sre-app-asg-"
      + predicted_capacity               = (known after apply)
      + protect_from_scale_in            = false
      + service_linked_role_arn          = (known after apply)
      + target_group_arns                = (known after apply)
      + termination_policies             = []
      + vpc_zone_identifier              = (known after apply)
      + wait_for_capacity_timeout        = "10m"
      + warm_pool_size                   = (known after apply)

      + launch_template {
          + id      = (known after apply)
          + name    = (known after apply)
          + version = (known after apply)
        }

      + tag {
          + key                 = "Name"
          + propagate_at_launch = true
          + value               = "sre-app-asg"
        }
      + tag {
          + key                 = "Tier"
          + propagate_at_launch = true
          + value               = "application"
        }

      + timeouts {}
    }

  # module.asg.aws_launch_template.this[0] will be created
  + resource "aws_launch_template" "this" {
      + arn                    = (known after apply)
      + default_version        = (known after apply)
      + description            = "App LT"
      + id                     = (known after apply)
      + image_id               = "ami-036428f37186903ce"
      + instance_type          = "t2.micro"
      + latest_version         = (known after apply)
      + name                   = (known after apply)
      + name_prefix            = "sre-app-lt-"
      + tags                   = {
          + "Name" = "sre-app"
          + "Tier" = "application"
        }
      + tags_all               = {
          + "Name" = "sre-app"
          + "Tier" = "application"
        }
      + update_default_version = true
      + user_data              = "IyEvYmluL2Jhc2gKc2V0IC1ldXhvIHBpcGVmYWlsCmlmIGNvbW1hbmQgLXYgZG5mID4vZGV2L251bGwgMj4mMTsgdGhlbgogIGRuZiAteSB1cGRhdGUKICBkbmYgLXkgaW5zdGFsbCBodHRwZAogIHN5c3RlbWN0bCBlbmFibGUgaHR0cGQKICBzeXN0ZW1jdGwgc3RhcnQgaHR0cGQKZWxzZQogIHl1bSAteSB1cGRhdGUgfHwgdHJ1ZQogIHl1bSAteSBpbnN0YWxsIGh0dHBkIHx8IHRydWUKICBzeXN0ZW1jdGwgZW5hYmxlIGh0dHBkIHx8IHRydWUKICBzeXN0ZW1jdGwgc3RhcnQgaHR0cGQgfHwgdHJ1ZQpmaQpJSUQ9JChjdXJsIC1zIGh0dHA6Ly8xNjkuMjU0LjE2OS4yNTQvbGF0ZXN0L21ldGEtZGF0YS9pbnN0YW5jZS1pZCB8fCBlY2hvIHVua25vd24pCkFaPSQoY3VybCAtcyBodHRwOi8vMTY5LjI1NC4xNjkuMjU0L2xhdGVzdC9tZXRhLWRhdGEvcGxhY2VtZW50L2F2YWlsYWJpbGl0eS16b25lIHx8IGVjaG8gdW5rbm93bikKY2F0ID4vdmFyL3d3dy9odG1sL2luZGV4Lmh0bWwgPDxIVE1MCjxodG1sPjxib2R5PjxoMT5TUkUgQ2hhbGxlbmdlIOKAkyBBcGFjaGU8L2gxPjxwPkluc3RhbmNlOiAkSUlEPC9wPjxwPkFaOiAkQVo8L3A+PC9ib2R5PjwvaHRtbD4KSFRNTAo="

      + monitoring {
          + enabled = true
        }

      + network_interfaces {
          + associate_public_ip_address = "false"
          + security_groups             = (known after apply)
        }
    }

  # module.bastion.aws_instance.this[0] will be created
  + resource "aws_instance" "this" {
      + ami                                  = "ami-036428f37186903ce"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = false
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = false
      + enable_primary_ipv6                  = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = (known after apply)
      + monitoring                           = true
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Application" = "sre-challenge"
          + "CNAME"       = "sre-bastion"
          + "Name"        = "sre-bastion"
          + "PatchGroup"  = "1"
          + "Tier"        = "management"
        }
      + tags_all                             = {
          + "Application" = "sre-challenge"
          + "CNAME"       = "sre-bastion"
          + "Name"        = "sre-bastion"
          + "PatchGroup"  = "1"
          + "Tier"        = "management"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + volume_tags                          = {
          + "Application" = "sre-challenge"
          + "Name"        = "sre-bastion"
          + "Tier"        = "management"
        }
      + vpc_security_group_ids               = (known after apply)

      + metadata_options {
          + http_endpoint               = "enabled"
          + http_protocol_ipv6          = "disabled"
          + http_put_response_hop_limit = 1
          + http_tokens                 = "required"
          + instance_metadata_tags      = "enabled"
        }

      + root_block_device {
          + delete_on_termination = true
          + device_name           = (known after apply)
          + encrypted             = true
          + iops                  = (known after apply)
          + kms_key_id            = "alias/aws/ebs"
          + tags_all              = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = 30
          + volume_type           = "gp3"
        }
    }

  # module.vpc.aws_cloudwatch_log_group.this[0] will be created
  + resource "aws_cloudwatch_log_group" "this" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + log_group_class   = (known after apply)
      + name              = (known after apply)
      + name_prefix       = (known after apply)
      + retention_in_days = 365
      + skip_destroy      = false
      + tags_all          = (known after apply)
    }

  # module.vpc.aws_default_security_group.default will be created
  + resource "aws_default_security_group" "default" {
      + arn                    = (known after apply)
      + description            = (known after apply)
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = (known after apply)
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags_all               = (known after apply)
      + vpc_id                 = (known after apply)
    }

  # module.vpc.aws_eip.nat[0] will be created
  + resource "aws_eip" "nat" {
      + allocation_id        = (known after apply)
      + arn                  = (known after apply)
      + association_id       = (known after apply)
      + carrier_ip           = (known after apply)
      + customer_owned_ip    = (known after apply)
      + domain               = "vpc"
      + id                   = (known after apply)
      + instance             = (known after apply)
      + ipam_pool_id         = (known after apply)
      + network_border_group = (known after apply)
      + network_interface    = (known after apply)
      + private_dns          = (known after apply)
      + private_ip           = (known after apply)
      + ptr_record           = (known after apply)
      + public_dns           = (known after apply)
      + public_ip            = (known after apply)
      + public_ipv4_pool     = (known after apply)
      + tags                 = {
          + "Name" = "-us-west-2a"
        }
      + tags_all             = {
          + "Name" = "-us-west-2a"
        }
      + vpc                  = (known after apply)
    }

  # module.vpc.aws_eip.nat[1] will be created
  + resource "aws_eip" "nat" {
      + allocation_id        = (known after apply)
      + arn                  = (known after apply)
      + association_id       = (known after apply)
      + carrier_ip           = (known after apply)
      + customer_owned_ip    = (known after apply)
      + domain               = "vpc"
      + id                   = (known after apply)
      + instance             = (known after apply)
      + ipam_pool_id         = (known after apply)
      + network_border_group = (known after apply)
      + network_interface    = (known after apply)
      + private_dns          = (known after apply)
      + private_ip           = (known after apply)
      + ptr_record           = (known after apply)
      + public_dns           = (known after apply)
      + public_ip            = (known after apply)
      + public_ipv4_pool     = (known after apply)
      + tags                 = {
          + "Name" = "-us-west-2b"
        }
      + tags_all             = {
          + "Name" = "-us-west-2b"
        }
      + vpc                  = (known after apply)
    }

  # module.vpc.aws_flow_log.this[0] will be created
  + resource "aws_flow_log" "this" {
      + arn                      = (known after apply)
      + iam_role_arn             = (known after apply)
      + id                       = (known after apply)
      + log_destination          = (known after apply)
      + log_destination_type     = "cloud-watch-logs"
      + log_format               = (known after apply)
      + log_group_name           = (known after apply)
      + max_aggregation_interval = 600
      + tags_all                 = (known after apply)
      + traffic_type             = "ALL"
      + vpc_id                   = (known after apply)
    }

  # module.vpc.aws_iam_policy.flowlogs_policy[0] will be created
  + resource "aws_iam_policy" "flowlogs_policy" {
      + arn              = (known after apply)
      + attachment_count = (known after apply)
      + description      = "Policy to allow vpc flow logs to forward logs to Cloudwatch"
      + id               = (known after apply)
      + name             = "-flowlogs-cloudwatch-policy"
      + name_prefix      = (known after apply)
      + path             = "/"
      + policy           = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "logs:PutLogEvents",
                          + "logs:DescribeLogStreams",
                          + "logs:DescribeLogGroups",
                          + "logs:CreateLogStream",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                      + Sid      = "AWSVPCFlowLogsPushToCloudWatch"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + policy_id        = (known after apply)
      + tags_all         = (known after apply)
    }

  # module.vpc.aws_iam_role.flowlogs_role[0] will be created
  + resource "aws_iam_role" "flowlogs_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "vpc-flow-logs.amazonaws.com"
                        }
                      + Sid       = "AWSVPCFlowLogsAssumeRole"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "-flowlogs-cloudwatch-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)
    }

  # module.vpc.aws_iam_role_policy_attachment.flowlogs_policy[0] will be created
  + resource "aws_iam_role_policy_attachment" "flowlogs_policy" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "-flowlogs-cloudwatch-role"
    }

  # module.vpc.aws_internet_gateway.this[0] will be created
  + resource "aws_internet_gateway" "this" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Name" = ""
        }
      + tags_all = (known after apply)
      + vpc_id   = (known after apply)
    }

  # module.vpc.aws_nat_gateway.this[0] will be created
  + resource "aws_nat_gateway" "this" {
      + allocation_id                      = (known after apply)
      + association_id                     = (known after apply)
      + connectivity_type                  = "public"
      + id                                 = (known after apply)
      + network_interface_id               = (known after apply)
      + private_ip                         = (known after apply)
      + public_ip                          = (known after apply)
      + secondary_private_ip_address_count = (known after apply)
      + secondary_private_ip_addresses     = (known after apply)
      + subnet_id                          = (known after apply)
      + tags                               = {
          + "Name" = "-us-west-2a"
        }
      + tags_all                           = {
          + "Name" = "-us-west-2a"
        }
    }

  # module.vpc.aws_nat_gateway.this[1] will be created
  + resource "aws_nat_gateway" "this" {
      + allocation_id                      = (known after apply)
      + association_id                     = (known after apply)
      + connectivity_type                  = "public"
      + id                                 = (known after apply)
      + network_interface_id               = (known after apply)
      + private_ip                         = (known after apply)
      + public_ip                          = (known after apply)
      + secondary_private_ip_address_count = (known after apply)
      + secondary_private_ip_addresses     = (known after apply)
      + subnet_id                          = (known after apply)
      + tags                               = {
          + "Name" = "-us-west-2b"
        }
      + tags_all                           = {
          + "Name" = "-us-west-2b"
        }
    }

  # module.vpc.aws_route.private_nat_gateway[0] will be created
  + resource "aws_route" "private_nat_gateway" {
      + destination_cidr_block = "0.0.0.0/0"
      + id                     = (known after apply)
      + instance_id            = (known after apply)
      + instance_owner_id      = (known after apply)
      + nat_gateway_id         = (known after apply)
      + network_interface_id   = (known after apply)
      + origin                 = (known after apply)
      + route_table_id         = (known after apply)
      + state                  = (known after apply)

      + timeouts {
          + create = "5m"
        }
    }

  # module.vpc.aws_route.private_nat_gateway[1] will be created
  + resource "aws_route" "private_nat_gateway" {
      + destination_cidr_block = "0.0.0.0/0"
      + id                     = (known after apply)
      + instance_id            = (known after apply)
      + instance_owner_id      = (known after apply)
      + nat_gateway_id         = (known after apply)
      + network_interface_id   = (known after apply)
      + origin                 = (known after apply)
      + route_table_id         = (known after apply)
      + state                  = (known after apply)

      + timeouts {
          + create = "5m"
        }
    }

  # module.vpc.aws_route.public_internet_gateway[0] will be created
  + resource "aws_route" "public_internet_gateway" {
      + destination_cidr_block = "0.0.0.0/0"
      + gateway_id             = (known after apply)
      + id                     = (known after apply)
      + instance_id            = (known after apply)
      + instance_owner_id      = (known after apply)
      + network_interface_id   = (known after apply)
      + origin                 = (known after apply)
      + route_table_id         = (known after apply)
      + state                  = (known after apply)

      + timeouts {
          + create = "5m"
        }
    }

  # module.vpc.aws_route.public_internet_gateway[1] will be created
  + resource "aws_route" "public_internet_gateway" {
      + destination_cidr_block = "0.0.0.0/0"
      + gateway_id             = (known after apply)
      + id                     = (known after apply)
      + instance_id            = (known after apply)
      + instance_owner_id      = (known after apply)
      + network_interface_id   = (known after apply)
      + origin                 = (known after apply)
      + route_table_id         = (known after apply)
      + state                  = (known after apply)

      + timeouts {
          + create = "5m"
        }
    }

  # module.vpc.aws_route53_resolver_dnssec_config.vpc_resolver_dnssec will be created
  + resource "aws_route53_resolver_dnssec_config" "vpc_resolver_dnssec" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + owner_id          = (known after apply)
      + resource_id       = (known after apply)
      + validation_status = (known after apply)
    }

  # module.vpc.aws_route_table.private[0] will be created
  + resource "aws_route_table" "private" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = (known after apply)
      + tags             = {
          + "Name" = "-private-us-west-2a-rtb"
        }
      + tags_all         = {
          + "Name" = "-private-us-west-2a-rtb"
        }
      + vpc_id           = (known after apply)
    }

  # module.vpc.aws_route_table.private[1] will be created
  + resource "aws_route_table" "private" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = (known after apply)
      + tags             = {
          + "Name" = "-private-us-west-2b-rtb"
        }
      + tags_all         = {
          + "Name" = "-private-us-west-2b-rtb"
        }
      + vpc_id           = (known after apply)
    }

  # module.vpc.aws_route_table.public[0] will be created
  + resource "aws_route_table" "public" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = (known after apply)
      + tags             = {
          + "Name" = "-public-us-west-2a-rtb"
        }
      + tags_all         = {
          + "Name" = "-public-us-west-2a-rtb"
        }
      + vpc_id           = (known after apply)
    }

  # module.vpc.aws_route_table.public[1] will be created
  + resource "aws_route_table" "public" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = (known after apply)
      + tags             = {
          + "Name" = "-public-us-west-2b-rtb"
        }
      + tags_all         = {
          + "Name" = "-public-us-west-2b-rtb"
        }
      + vpc_id           = (known after apply)
    }

  # module.vpc.aws_route_table_association.private[0] will be created
  + resource "aws_route_table_association" "private" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.private[1] will be created
  + resource "aws_route_table_association" "private" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.private[2] will be created
  + resource "aws_route_table_association" "private" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.private[3] will be created
  + resource "aws_route_table_association" "private" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.public[0] will be created
  + resource "aws_route_table_association" "public" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.public[1] will be created
  + resource "aws_route_table_association" "public" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_subnet.private[0] will be created
  + resource "aws_subnet" "private" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-west-2a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.1.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "-app-a-us-west-2a"
        }
      + tags_all                                       = {
          + "Name" = "-app-a-us-west-2a"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_subnet.private[1] will be created
  + resource "aws_subnet" "private" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-west-2a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.1.2.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "-backend-a-us-west-2a"
        }
      + tags_all                                       = {
          + "Name" = "-backend-a-us-west-2a"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_subnet.private[2] will be created
  + resource "aws_subnet" "private" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-west-2b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.1.17.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "-app-b-us-west-2b"
        }
      + tags_all                                       = {
          + "Name" = "-app-b-us-west-2b"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_subnet.private[3] will be created
  + resource "aws_subnet" "private" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-west-2b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.1.18.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "-backend-b-us-west-2b"
        }
      + tags_all                                       = {
          + "Name" = "-backend-b-us-west-2b"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_subnet.public[0] will be created
  + resource "aws_subnet" "public" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-west-2a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.1.0.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "-mgmt-a-us-west-2a"
        }
      + tags_all                                       = {
          + "Name" = "-mgmt-a-us-west-2a"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_subnet.public[1] will be created
  + resource "aws_subnet" "public" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-west-2b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.1.16.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "-mgmt-b-us-west-2b"
        }
      + tags_all                                       = {
          + "Name" = "-mgmt-b-us-west-2b"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_vpc.this will be created
  + resource "aws_vpc" "this" {
      + arn                                  = (known after apply)
      + assign_generated_ipv6_cidr_block     = false
      + cidr_block                           = "10.1.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = true
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Name" = "sre-challenge-vpc"
        }
      + tags_all                             = {
          + "Name" = "sre-challenge-vpc"
        }
    }

Plan: 52 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + alb_dns_name        = (known after apply)
  + app_asg_name        = (known after apply)
  + bastion_instance_id = (known after apply)
  + bastion_public_ip   = (known after apply)
  + bastion_sg_id       = (known after apply)

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: 
random_id.alb_logs_suffix[0]: Creating...
random_id.alb_logs_suffix[0]: Creation complete after 0s [id=6e6m]
module.vpc.aws_vpc.this: Creating...
module.vpc.aws_iam_policy.flowlogs_policy[0]: Creating...
module.vpc.aws_iam_role.flowlogs_role[0]: Creating...
aws_sns_topic.alerts[0]: Creating...
module.vpc.aws_eip.nat[1]: Creating...
module.vpc.aws_eip.nat[0]: Creating...
aws_s3_bucket.alb_logs[0]: Creating...
aws_sns_topic.alerts[0]: Creation complete after 1s [id=arn:aws:sns:us-west-2:941377146656:sre-alb-alerts]
module.vpc.aws_iam_policy.flowlogs_policy[0]: Creation complete after 1s [id=arn:aws:iam::941377146656:policy/-flowlogs-cloudwatch-policy]
module.vpc.aws_eip.nat[0]: Creation complete after 1s [id=eipalloc-02a430b90af260a06]
module.vpc.aws_eip.nat[1]: Creation complete after 1s [id=eipalloc-08621100d6416147d]
module.vpc.aws_iam_role.flowlogs_role[0]: Creation complete after 1s [id=-flowlogs-cloudwatch-role]
module.vpc.aws_iam_role_policy_attachment.flowlogs_policy[0]: Creating...
module.vpc.aws_iam_role_policy_attachment.flowlogs_policy[0]: Creation complete after 1s [id=-flowlogs-cloudwatch-role-20250929062002636400000001]
aws_s3_bucket.alb_logs[0]: Creation complete after 2s [id=sre-alb-logs-e9eea6]
data.aws_iam_policy_document.alb_logs[0]: Reading...
aws_s3_bucket_public_access_block.alb_logs[0]: Creating...
aws_s3_bucket_server_side_encryption_configuration.alb_logs[0]: Creating...
aws_s3_bucket_versioning.alb_logs[0]: Creating...
data.aws_iam_policy_document.alb_logs[0]: Read complete after 0s [id=1027483872]
aws_s3_bucket_policy.alb_logs[0]: Creating...
aws_s3_bucket_policy.alb_logs[0]: Creation complete after 1s [id=sre-alb-logs-e9eea6]
aws_s3_bucket_public_access_block.alb_logs[0]: Creation complete after 1s [id=sre-alb-logs-e9eea6]
aws_s3_bucket_server_side_encryption_configuration.alb_logs[0]: Creation complete after 1s [id=sre-alb-logs-e9eea6]
aws_s3_bucket_versioning.alb_logs[0]: Creation complete after 2s [id=sre-alb-logs-e9eea6]
module.vpc.aws_vpc.this: Still creating... [10s elapsed]
module.vpc.aws_vpc.this: Creation complete after 12s [id=vpc-01cbe0305765dd2d7]
module.vpc.aws_route53_resolver_dnssec_config.vpc_resolver_dnssec: Creating...
module.vpc.aws_cloudwatch_log_group.this[0]: Creating...
module.vpc.aws_default_security_group.default: Creating...
module.vpc.aws_route_table.private[0]: Creating...
module.vpc.aws_route_table.private[1]: Creating...
module.vpc.aws_route_table.public[1]: Creating...
module.vpc.aws_subnet.private[3]: Creating...
module.vpc.aws_subnet.private[2]: Creating...
module.vpc.aws_subnet.private[0]: Creating...
module.vpc.aws_subnet.public[1]: Creating...
module.vpc.aws_cloudwatch_log_group.this[0]: Creation complete after 1s [id=/aws/vpcflow/vpc-01cbe0305765dd2d7]
module.vpc.aws_route_table.public[0]: Creating...
module.vpc.aws_route_table.private[0]: Creation complete after 1s [id=rtb-0dc77d9d598a1b6ef]
module.vpc.aws_subnet.public[0]: Creating...
module.vpc.aws_subnet.private[0]: Creation complete after 1s [id=subnet-0bb26a1553f811016]
module.vpc.aws_internet_gateway.this[0]: Creating...
module.vpc.aws_subnet.private[2]: Creation complete after 1s [id=subnet-00701d6d1d79c06e1]
module.vpc.aws_route_table.private[1]: Creation complete after 1s [id=rtb-0cea01cd2b022512e]
module.vpc.aws_subnet.private[1]: Creating...
aws_lb_target_group.app: Creating...
module.vpc.aws_subnet.private[3]: Creation complete after 1s [id=subnet-076e25f0eec43f854]
module.vpc.aws_route_table.public[1]: Creation complete after 1s [id=rtb-089279e02a568b00c]
aws_security_group.alb: Creating...
aws_security_group.bastion: Creating...
module.vpc.aws_route_table.public[0]: Creation complete after 0s [id=rtb-0a5840625e3f85eb4]
module.vpc.aws_flow_log.this[0]: Creating...
module.vpc.aws_internet_gateway.this[0]: Creation complete after 1s [id=igw-06011d8bd876db15b]
module.vpc.aws_route.public_internet_gateway[1]: Creating...
module.vpc.aws_flow_log.this[0]: Creation complete after 1s [id=fl-0b9e253280b56d4cf]
module.vpc.aws_route.public_internet_gateway[0]: Creating...
module.vpc.aws_subnet.private[1]: Creation complete after 1s [id=subnet-09ca84cec96254e46]
module.vpc.aws_route_table_association.private[0]: Creating...
module.vpc.aws_default_security_group.default: Creation complete after 2s [id=sg-094ecba3ec6a561dd]
module.vpc.aws_route_table_association.private[1]: Creating...
aws_lb_target_group.app: Creation complete after 1s [id=arn:aws:elasticloadbalancing:us-west-2:941377146656:targetgroup/sre-app-tg/d789987502ee34fc]
module.vpc.aws_route_table_association.private[2]: Creating...
module.vpc.aws_route.public_internet_gateway[1]: Creation complete after 0s [id=r-rtb-089279e02a568b00c1080289494]
module.vpc.aws_route_table_association.private[3]: Creating...
module.vpc.aws_route.public_internet_gateway[0]: Creation complete after 0s [id=r-rtb-0a5840625e3f85eb41080289494]
module.vpc.aws_route_table_association.private[0]: Creation complete after 1s [id=rtbassoc-07db3e683dd940d41]
module.vpc.aws_route_table_association.private[2]: Creation complete after 1s [id=rtbassoc-03780186414d33434]
module.vpc.aws_route_table_association.private[1]: Creation complete after 1s [id=rtbassoc-0b8a17c693b92b17b]
module.vpc.aws_route_table_association.private[3]: Creation complete after 1s [id=rtbassoc-0b313e83fddf0ed0e]
aws_security_group.alb: Creation complete after 3s [id=sg-009c083bb4a041552]
aws_security_group.app: Creating...
aws_security_group.bastion: Creation complete after 3s [id=sg-0f171305b4d9f1732]
aws_security_group.app: Creation complete after 2s [id=sg-036887e16d21d12f7]
aws_security_group_rule.bastion_to_app_ssh: Creating...
module.asg.aws_launch_template.this[0]: Creating...
aws_security_group_rule.bastion_to_app_ssh: Creation complete after 1s [id=sgrule-4182583085]
module.vpc.aws_route53_resolver_dnssec_config.vpc_resolver_dnssec: Still creating... [10s elapsed]
module.vpc.aws_subnet.public[1]: Still creating... [10s elapsed]
module.vpc.aws_subnet.public[0]: Still creating... [10s elapsed]
module.vpc.aws_subnet.public[1]: Creation complete after 12s [id=subnet-0ac37f73c84566f0b]
module.vpc.aws_subnet.public[0]: Creation complete after 11s [id=subnet-082a802ddae8c40f7]
module.vpc.aws_route_table_association.public[1]: Creating...
module.vpc.aws_route_table_association.public[0]: Creating...
module.vpc.aws_nat_gateway.this[1]: Creating...
module.vpc.aws_nat_gateway.this[0]: Creating...
aws_lb.alb: Creating...
module.bastion.aws_instance.this[0]: Creating...
module.asg.aws_launch_template.this[0]: Creation complete after 6s [id=lt-09b4e37f1f9c4ac71]
module.asg.aws_autoscaling_group.this[0]: Creating...
module.vpc.aws_route_table_association.public[0]: Creation complete after 0s [id=rtbassoc-08fefd4fd0563ca7e]
module.vpc.aws_route_table_association.public[1]: Creation complete after 0s [id=rtbassoc-01e88abf356345f3e]
module.vpc.aws_route53_resolver_dnssec_config.vpc_resolver_dnssec: Still creating... [20s elapsed]
module.vpc.aws_nat_gateway.this[1]: Still creating... [10s elapsed]
module.vpc.aws_nat_gateway.this[0]: Still creating... [10s elapsed]
aws_lb.alb: Still creating... [10s elapsed]
module.bastion.aws_instance.this[0]: Still creating... [10s elapsed]
module.asg.aws_autoscaling_group.this[0]: Still creating... [10s elapsed]
module.vpc.aws_route53_resolver_dnssec_config.vpc_resolver_dnssec: Still creating... [30s elapsed]
module.vpc.aws_nat_gateway.this[0]: Still creating... [20s elapsed]
module.vpc.aws_nat_gateway.this[1]: Still creating... [20s elapsed]
aws_lb.alb: Still creating... [20s elapsed]
module.bastion.aws_instance.this[0]: Still creating... [20s elapsed]
module.asg.aws_autoscaling_group.this[0]: Still creating... [20s elapsed]
module.vpc.aws_route53_resolver_dnssec_config.vpc_resolver_dnssec: Still creating... [40s elapsed]
module.vpc.aws_nat_gateway.this[0]: Still creating... [30s elapsed]
module.vpc.aws_nat_gateway.this[1]: Still creating... [30s elapsed]
aws_lb.alb: Still creating... [30s elapsed]
module.bastion.aws_instance.this[0]: Still creating... [30s elapsed]
module.asg.aws_autoscaling_group.this[0]: Still creating... [30s elapsed]
module.bastion.aws_instance.this[0]: Creation complete after 33s [id=i-05919703fff87932d]
data.aws_instance.bastion: Reading...
data.aws_instance.bastion: Read complete after 1s [id=i-05919703fff87932d]
module.vpc.aws_route53_resolver_dnssec_config.vpc_resolver_dnssec: Still creating... [50s elapsed]
module.vpc.aws_nat_gateway.this[1]: Still creating... [40s elapsed]
module.vpc.aws_nat_gateway.this[0]: Still creating... [40s elapsed]
aws_lb.alb: Still creating... [40s elapsed]
module.asg.aws_autoscaling_group.this[0]: Still creating... [40s elapsed]
module.vpc.aws_route53_resolver_dnssec_config.vpc_resolver_dnssec: Still creating... [1m0s elapsed]
module.vpc.aws_nat_gateway.this[0]: Still creating... [50s elapsed]
module.vpc.aws_nat_gateway.this[1]: Still creating... [50s elapsed]
aws_lb.alb: Still creating... [50s elapsed]
module.asg.aws_autoscaling_group.this[0]: Still creating... [50s elapsed]
module.asg.aws_autoscaling_group.this[0]: Creation complete after 58s [id=sre-app-asg-2025092906202529230000000c]
module.vpc.aws_route53_resolver_dnssec_config.vpc_resolver_dnssec: Still creating... [1m10s elapsed]
module.vpc.aws_nat_gateway.this[1]: Still creating... [1m0s elapsed]
module.vpc.aws_nat_gateway.this[0]: Still creating... [1m0s elapsed]
aws_lb.alb: Still creating... [1m0s elapsed]
module.vpc.aws_route53_resolver_dnssec_config.vpc_resolver_dnssec: Still creating... [1m20s elapsed]
module.vpc.aws_nat_gateway.this[1]: Still creating... [1m10s elapsed]
module.vpc.aws_nat_gateway.this[0]: Still creating... [1m10s elapsed]
aws_lb.alb: Still creating... [1m10s elapsed]
module.vpc.aws_route53_resolver_dnssec_config.vpc_resolver_dnssec: Still creating... [1m30s elapsed]
module.vpc.aws_nat_gateway.this[1]: Still creating... [1m20s elapsed]
module.vpc.aws_nat_gateway.this[0]: Still creating... [1m20s elapsed]
aws_lb.alb: Still creating... [1m20s elapsed]
module.vpc.aws_route53_resolver_dnssec_config.vpc_resolver_dnssec: Still creating... [1m40s elapsed]
module.vpc.aws_nat_gateway.this[0]: Still creating... [1m30s elapsed]
module.vpc.aws_nat_gateway.this[1]: Still creating... [1m30s elapsed]
aws_lb.alb: Still creating... [1m30s elapsed]
module.vpc.aws_nat_gateway.this[1]: Creation complete after 1m34s [id=nat-0c921c02c07a94b80]
module.vpc.aws_route53_resolver_dnssec_config.vpc_resolver_dnssec: Still creating... [1m50s elapsed]
module.vpc.aws_nat_gateway.this[0]: Still creating... [1m40s elapsed]
aws_lb.alb: Still creating... [1m40s elapsed]
module.vpc.aws_nat_gateway.this[0]: Creation complete after 1m44s [id=nat-0071b8dae09572a31]
module.vpc.aws_route.private_nat_gateway[1]: Creating...
module.vpc.aws_route.private_nat_gateway[0]: Creating...
module.vpc.aws_route.private_nat_gateway[0]: Creation complete after 1s [id=r-rtb-0dc77d9d598a1b6ef1080289494]
module.vpc.aws_route.private_nat_gateway[1]: Creation complete after 1s [id=r-rtb-0cea01cd2b022512e1080289494]
module.vpc.aws_route53_resolver_dnssec_config.vpc_resolver_dnssec: Still creating... [2m0s elapsed]
aws_lb.alb: Still creating... [1m50s elapsed]
module.vpc.aws_route53_resolver_dnssec_config.vpc_resolver_dnssec: Still creating... [2m10s elapsed]
aws_lb.alb: Still creating... [2m0s elapsed]
module.vpc.aws_route53_resolver_dnssec_config.vpc_resolver_dnssec: Creation complete after 2m15s [id=rdsc-f878e7faf5a931c4]
aws_lb.alb: Still creating... [2m10s elapsed]
aws_lb.alb: Still creating... [2m20s elapsed]
aws_lb.alb: Still creating... [2m30s elapsed]
aws_lb.alb: Still creating... [2m40s elapsed]
aws_lb.alb: Still creating... [2m50s elapsed]
aws_lb.alb: Still creating... [3m0s elapsed]
aws_lb.alb: Creation complete after 3m3s [id=arn:aws:elasticloadbalancing:us-west-2:941377146656:loadbalancer/app/sre-alb/1b2bd801a9046c65]
aws_cloudwatch_metric_alarm.tg_unhealthy[0]: Creating...
aws_cloudwatch_metric_alarm.alb_5xx[0]: Creating...
aws_lb_listener.http: Creating...
aws_lb_listener.http: Creation complete after 0s [id=arn:aws:elasticloadbalancing:us-west-2:941377146656:listener/app/sre-alb/1b2bd801a9046c65/67330f339a358ff2]
aws_cloudwatch_metric_alarm.alb_5xx[0]: Creation complete after 0s [id=sre-alb-HTTPCode_ELB_5XX_Count>0]
aws_cloudwatch_metric_alarm.tg_unhealthy[0]: Creation complete after 0s [id=sre-tg-UnHealthyHostCount>0]

Apply complete! Resources: 52 added, 0 changed, 0 destroyed.

Outputs:

alb_dns_name = "sre-alb-845772763.us-west-2.elb.amazonaws.com"
app_asg_name = "sre-app-asg-2025092906202529230000000c"
bastion_instance_id = "i-05919703fff87932d"
bastion_public_ip = ""
bastion_sg_id = "sg-0f171305b4d9f1732"
